<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Explore</title>
    <link href="http://explore.ftao.org/feed.xml" rel="self" />
    
    <link href="http://explore.ftao.org" />
    
    <updated>2011-12-10T22:52:09Z</updated>
    <id>http://explore.ftao.org</id>
    <entry>
        <title type="html"><![CDATA[Email 发送服务]]></title>
        <author><name>Neal Tao</name><uri>http://explore.ftao.org</uri></author>
        <link href="http://explore.ftao.org/email-delivery-service.html"/>
        <updated>2011-12-10T00:00:00Z</updated>
        <published>2011-12-10T00:00:00Z</published>
        <id>http://explore.ftao.org/email-delivery-service.html</id>
        <category scheme="http://explore.ftao.org/tag/email/" term="email" label="Email" />
        <category scheme="http://explore.ftao.org/tag/send/" term="send" label="Send" />
        <category scheme="http://explore.ftao.org/tag/saas/" term="saas" label="Saas" />
        <content type="html" xml:base="http://explore.ftao.org" xml:lang="en">
            <![CDATA[ <p>发送Email是几乎每一个Web应用都要考虑的问题。
传统的方案都是在自己的服务器上搭建邮件服务器,但是这种方案经常会碰到发出的邮件被当成垃圾邮件的问题。
特别是如果你在使用类似Amazon EC2 这样的云服务器，邮件接收方甚至可能直接拒绝接受你的邮件。连进用户的垃圾邮件箱的机会都没有.</p>
<p>解决这个问题最简单的一个方案是使用第三方的邮件发送服务器，他们的IP地址一般各个ISP/邮件服务商等的白名单中，能有比较高的到达率.
(当然到达率不只和发送者的IP地址有关,这些服务还做了很多其他的努力来保证到达率。)</p>
<div class="section" id="id1">
<h2>邮件发送服务不完全列表</h2>
<table border="1" class="docutils">
<colgroup>
<col width="25%" />
<col width="13%" />
<col width="13%" />
<col width="29%" />
<col width="19%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">服务</th>
<th class="head">支持SMTP</th>
<th class="head">支持API</th>
<th class="head">支持附件</th>
<th class="head">免费额度</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><a class="reference external" href="http://aws.amazon.com/ses/">Amazon SES</a></td>
<td>否</td>
<td>是</td>
<td>部分支持 <a class="footnote-reference" href="#ses-att" id="id2">[1]</a></td>
<td>&nbsp;</td>
</tr>
<tr><td><a class="reference external" href="http://sendgrid.com">SendGrid</a></td>
<td>是</td>
<td>是</td>
<td>支持</td>
<td>200封/天</td>
</tr>
<tr><td><a class="reference external" href="http://elasticemail.com/">Elastic Email</a></td>
<td>是</td>
<td>是</td>
<td>支持</td>
<td>1000封</td>
</tr>
<tr><td><a class="reference external" href="http://postmarkapp.com/">PostmarkApp</a></td>
<td>是</td>
<td>是</td>
<td>支持</td>
<td>1000封</td>
</tr>
<tr><td><a class="reference external" href="http://www.critsend.com/">CritSend</a></td>
<td>是</td>
<td>否</td>
<td>支持</td>
<td>1000封</td>
</tr>
<tr><td><a class="reference external" href="http://mailgun.net">MailGun</a></td>
<td>是</td>
<td>是</td>
<td>支持</td>
<td>200封/天</td>
</tr>
<tr><td><a class="reference external" href="http://www.mailjet.com/">MailJet</a></td>
<td>是</td>
<td>否</td>
<td>支持</td>
<td>200封/天</td>
</tr>
<tr><td><a class="reference external" href="http://socketlabs.com/">SocketLabs</a></td>
<td>是</td>
<td>否</td>
<td>支持</td>
<td>500封/月</td>
</tr>
<tr><td><a class="reference external" href="http://dyn.com/email/">Dyn Email</a></td>
<td>是</td>
<td>否</td>
<td>支持</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="ses-att" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[1]</a></td><td>Amazon SES 只支持一些 <a class="reference external" href="http://docs.amazonwebservices.com/ses/latest/DeveloperGuide/index.html?AppendixMIME.html">特定类型</a> 的文件作为附件.</td></tr>
</tbody>
</table>
<p>你的应用可以通过连接它们的SMTP Relay 或者HTTP API的方式,通过他们的平台发送邮件.</p>
<p>除了Amazon SES, 其他的服务都提供了SMTP 接口, 现有的应用程序一般都不用修改，只需将邮件服务器地址改成他们提供的服务器就可以了.</p>
<p>对于Amazon SES, 你有两个方案</p>
<ul class="simple">
<li>直接在应用程序中调用SES 的Web Service</li>
<li>配置本地SMTP服务器通过Amazon SES 的脚本来发送邮件, 在应用中连接本地的SMTP服务器</li>
</ul>
<p>这些服务,我实际使用的有 Amazon SES 和 SendGrid. 从我的经验来看，使用都不复杂, 价格也不贵, 比维护自己的SMTP服务器成本低多了.</p>
<p>参考资料:</p>
<ul class="simple">
<li><a class="reference external" href="http://stackoverflow.com/questions/4798141/sendgrid-vs-postmark-vs-amazon-ses-and-other-email-smtp-api-providers">http://stackoverflow.com/questions/4798141/sendgrid-vs-postmark-vs-amazon-ses-and-other-email-smtp-api-providers</a></li>
<li><a class="reference external" href="http://stackoverflow.com/questions/3746213/sendgrid-vs-postmark/3830175#3830175">http://stackoverflow.com/questions/3746213/sendgrid-vs-postmark/3830175#3830175</a></li>
</ul>
</div>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Incoming Email Automation]]></title>
        <author><name>Neal Tao</name><uri>http://explore.ftao.org</uri></author>
        <link href="http://explore.ftao.org/incoming-email-automation.html"/>
        <updated>2011-12-09T00:00:00Z</updated>
        <published>2011-12-09T00:00:00Z</published>
        <id>http://explore.ftao.org/incoming-email-automation.html</id>
        <category scheme="http://explore.ftao.org/tag/email/" term="email" label="Email" />
        <category scheme="http://explore.ftao.org/tag/api/" term="api" label="Api" />
        <category scheme="http://explore.ftao.org/tag/saas/" term="saas" label="Saas" />
        <content type="html" xml:base="http://explore.ftao.org" xml:lang="en">
            <![CDATA[ <p>Jamie Zawinski 说:</p>
<pre class="literal-block">
&gt;&gt; Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can.
</pre>
<p>互联网上, 大家都会 <tt class="docutils literal">Write</tt> Email （注册邮件,找回密码邮件,广告邮件), 但是能够 <tt class="docutils literal">Read</tt> 邮件的应用就少多了。</p>
<p>当然我们还是可以找到不少支持 <tt class="docutils literal">Read</tt> 邮件的应用的:</p>
<ul class="simple">
<li>邮件列表 - 通过发送邮件来订阅或退订</li>
<li>Ticket系统 - 通过发送邮件来回复Ticket, 关闭Ticket等.</li>
<li>Kindle - 通过附件方式发送文件的方式传输文件到Kindle</li>
<li>Google Doc / Evernote 等 - 通过发送内容到特定到邮件地址来保存文件或笔记</li>
</ul>
<p>但是相对于编写处理HTTP请求的脚本，要编写一个可以 <tt class="docutils literal">Read</tt> Email 的Web应用并不轻松。</p>
<ul class="simple">
<li>架设一个Email服务器要比架设一个Web服务器复杂多了</li>
<li>解析Email 并不容易</li>
</ul>
<p>我们是如此的乐于和善于使用HTTP, 解决这个问题最佳的方案当然是将Email转换成HTTP协议。</p>
<p>比如说下面这些服务:</p>
<ul class="simple">
<li>cloundmailin <a class="reference external" href="http://cloudmailin.com/">http://cloudmailin.com/</a></li>
<li>mailgun  <a class="reference external" href="http://mailgun.net">http://mailgun.net</a></li>
<li>Email Yak <a class="reference external" href="http://www.emailyak.com/">http://www.emailyak.com/</a></li>
</ul>
<p>这三个服务都支持接受和解析Email然后通过HTTP 协议将邮件的内容POST到你的Web应用中。</p>
<blockquote>
User Send Email --&gt; Email Server --&gt; Your Web App</blockquote>
<p>这三个服务我首先发现的是cloudmailin, 之后看见dotcloud 在推荐mailgun, 而Email Yak 是前几天在
<a class="reference external" href="https://news.ycombinator.com/item?id=3325330">Hacker News</a> 看到的.</p>
<p>有了这些服务，我们不需要架设Email服务器就让应用可以支持 <tt class="docutils literal">Read</tt> Email了.</p>
<p>比如说我们就可以:</p>
<ul class="simple">
<li>通过Email接受报表数据, 解析后保存到数据库就可以做历史趋势的统计了</li>
<li>通过Email来完成注册,找回密码等等常见操作。</li>
<li>更多...</li>
</ul>
<p>最后如果你对这些第三方服务不信任，一定要在自己的服务器上接受并解析Email, <a class="reference external" href="http://lamsonproject.org">lamsonproject</a> 可能是一个不错的选择.</p>
 ]]>
        </content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新的开始]]></title>
        <author><name>Neal Tao</name><uri>http://explore.ftao.org</uri></author>
        <link href="http://explore.ftao.org/start.html"/>
        <updated>2011-12-09T00:00:00Z</updated>
        <published>2011-12-09T00:00:00Z</published>
        <id>http://explore.ftao.org/start.html</id>
        <category scheme="http://explore.ftao.org/tag/explore/" term="explore" label="Explore" />
        <category scheme="http://explore.ftao.org/tag/start/" term="start" label="Start" />
        <content type="html" xml:base="http://explore.ftao.org" xml:lang="en">
            <![CDATA[ <p>对信息的消费太多，创造太少 - 这是我现在的状态。
这个站点 <a class="reference external" href="http://explore.ftao.org">http://explore.ftao.org</a> 是我为了改变这个状态而做的一个尝试。</p>
<p>我会在这里分享:</p>
<ul class="simple">
<li>有趣/有用的网络服务</li>
<li>有趣的开源项目</li>
<li>有价值的书籍和资料</li>
<li>其他我所关心的东西</li>
</ul>
<p>Let's Start !</p>
 ]]>
        </content>
    </entry>
    </feed>